/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LotteryInterface extends ethers.utils.Interface {
  functions: {
    "balanceEachRound(uint256)": FunctionFragment;
    "buyTicket(uint256[])": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "isPickedWinner(uint256)": FunctionFragment;
    "lotteryId()": FunctionFragment;
    "lottoToken()": FunctionFragment;
    "myTicketOfLotteryId(uint256)": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "pickWinner()": FunctionFragment;
    "ticketCount()": FunctionFragment;
    "ticketPrice()": FunctionFragment;
    "tickets(uint256)": FunctionFragment;
    "ticketsEachRound(uint256,uint256)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "totalMyTicket(address,uint256,uint256)": FunctionFragment;
    "winningTicket(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceEachRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPickedWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lotteryId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lottoToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myTicketOfLotteryId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pickWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsEachRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalMyTicket",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "winningTicket",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPickedWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lotteryId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lottoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myTicketOfLotteryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pickWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketsEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMyTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningTicket",
    data: BytesLike
  ): Result;

  events: {};
}

export class Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LotteryInterface;

  functions: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicket(
      number: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      lotteryId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPickedWinner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lotteryId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lottoToken(overrides?: CallOverrides): Promise<[string]>;

    myTicketOfLotteryId(
      lotteryId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    pickWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ticketPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    ticketsEachRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    totalMyTicket(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    winningTicket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceEachRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicket(
    number: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    lotteryId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isPickedWinner(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

  lottoToken(overrides?: CallOverrides): Promise<string>;

  myTicketOfLotteryId(
    lotteryId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  pickWinner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

  ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

  tickets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

  ticketsEachRound(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  totalMyTicket(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  winningTicket(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(number: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    claimReward(
      lotteryId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isPickedWinner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    lottoToken(overrides?: CallOverrides): Promise<string>;

    myTicketOfLotteryId(
      lotteryId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    pickWinner(overrides?: CallOverrides): Promise<void>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { owner: string; number: BigNumber }>;

    ticketsEachRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    totalMyTicket(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningTicket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicket(
      number: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      lotteryId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPickedWinner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lotteryId(overrides?: CallOverrides): Promise<BigNumber>;

    lottoToken(overrides?: CallOverrides): Promise<BigNumber>;

    myTicketOfLotteryId(
      lotteryId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    pickWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticketCount(overrides?: CallOverrides): Promise<BigNumber>;

    ticketPrice(overrides?: CallOverrides): Promise<BigNumber>;

    tickets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ticketsEachRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalMyTicket(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningTicket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicket(
      number: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      lotteryId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPickedWinner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lotteryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lottoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myTicketOfLotteryId(
      lotteryId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickWinner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketsEachRound(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalMyTicket(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningTicket(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
