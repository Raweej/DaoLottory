/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LottoCommuInterface extends ethers.utils.Interface {
  functions: {
    "balanceEachRound(uint256)": FunctionFragment;
    "buyTicketDAO(uint256)": FunctionFragment;
    "calculateFee(uint256)": FunctionFragment;
    "claim(uint256)": FunctionFragment;
    "claimLotteryReward(uint256)": FunctionFragment;
    "closeRound()": FunctionFragment;
    "decimal()": FunctionFragment;
    "fee()": FunctionFragment;
    "isClaimed(uint256,address)": FunctionFragment;
    "isStartRound(uint256)": FunctionFragment;
    "isWinEachRound(uint256)": FunctionFragment;
    "lottery()": FunctionFragment;
    "lotteryAddress()": FunctionFragment;
    "lotteryIdEachRound(uint256)": FunctionFragment;
    "lottoToken()": FunctionFragment;
    "lottoTokenAddress()": FunctionFragment;
    "memberTicketsAmount(uint256,address)": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "reward(uint256)": FunctionFragment;
    "roundId()": FunctionFragment;
    "roundReward(uint256)": FunctionFragment;
    "startRound()": FunctionFragment;
    "ticketsEachRound(uint256)": FunctionFragment;
    "tokenFeeReservers(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceEachRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTicketDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimLotteryReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimal", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStartRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWinEachRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lottery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lotteryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lotteryIdEachRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lottoToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lottoTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberTicketsAmount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roundId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roundReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsEachRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFeeReservers",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "balanceEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTicketDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimLotteryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeRound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStartRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWinEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lotteryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lotteryIdEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lottoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lottoTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberTicketsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roundId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roundReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketsEachRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFeeReservers",
    data: BytesLike
  ): Result;

  events: {};
}

export class LottoCommu extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LottoCommuInterface;

  functions: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyTicketDAO(
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimLotteryReward(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isStartRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWinEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lottery(overrides?: CallOverrides): Promise<[string]>;

    lotteryAddress(overrides?: CallOverrides): Promise<[string]>;

    lotteryIdEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lottoToken(overrides?: CallOverrides): Promise<[string]>;

    lottoTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    memberTicketsAmount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    reward(
      roundId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    roundReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ticketsEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenFeeReservers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceEachRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyTicketDAO(
    ticketCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFee(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    roundId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimLotteryReward(
    roundId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimal(overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  isClaimed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isStartRound(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isWinEachRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lottery(overrides?: CallOverrides): Promise<string>;

  lotteryAddress(overrides?: CallOverrides): Promise<string>;

  lotteryIdEachRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lottoToken(overrides?: CallOverrides): Promise<string>;

  lottoTokenAddress(overrides?: CallOverrides): Promise<string>;

  memberTicketsAmount(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  reward(roundId_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  roundId(overrides?: CallOverrides): Promise<BigNumber>;

  roundReward(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startRound(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ticketsEachRound(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenFeeReservers(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicketDAO(
      ticketCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(roundId_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimLotteryReward(
      roundId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeRound(overrides?: CallOverrides): Promise<void>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isStartRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWinEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lottery(overrides?: CallOverrides): Promise<string>;

    lotteryAddress(overrides?: CallOverrides): Promise<string>;

    lotteryIdEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lottoToken(overrides?: CallOverrides): Promise<string>;

    lottoTokenAddress(overrides?: CallOverrides): Promise<string>;

    memberTicketsAmount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    reward(
      roundId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    roundReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startRound(overrides?: CallOverrides): Promise<void>;

    ticketsEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFeeReservers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyTicketDAO(
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimLotteryReward(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimal(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isStartRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWinEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lottery(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lotteryIdEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lottoToken(overrides?: CallOverrides): Promise<BigNumber>;

    lottoTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    memberTicketsAmount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      roundId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    roundReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ticketsEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFeeReservers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTicketDAO(
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimLotteryReward(
      roundId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isStartRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWinEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lottery(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lotteryIdEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lottoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lottoTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberTicketsAmount(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reward(
      roundId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roundReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startRound(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ticketsEachRound(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFeeReservers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
